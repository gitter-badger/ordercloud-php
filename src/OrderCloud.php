<?php namespace Ordercloud;

use Ordercloud\Connections\Connection;
use Ordercloud\Connections\ConnectionFee;
use Ordercloud\Connections\ConnectionFeeMetric;
use Ordercloud\Connections\ConnectionFeeStructure;
use Ordercloud\Connections\ConnectionFeeType;
use Ordercloud\Connections\ConnectionType;
use Ordercloud\Ordercloud\OrdercloudInterface;
use Ordercloud\Orders\Order;
use Ordercloud\Orders\OrderItem;
use Ordercloud\Orders\OrderStatus;
use Ordercloud\Organisations\Organisation;
use Ordercloud\Organisations\OrganisationIndustry;
use Ordercloud\Organisations\OrganisationOperatingHours;
use Ordercloud\Organisations\OrganisationProfile;
use Ordercloud\Organisations\OrganisationType;
use Ordercloud\Organisations\Settings\OrganisationSetting;
use Ordercloud\Organisations\Settings\OrganisationSettingKey;
use Ordercloud\Organisations\OrganisationShort;
use Ordercloud\Products\Product;
use Ordercloud\Products\ProductOption;
use Ordercloud\Products\ProductShort;use Ordercloud\Products\ProductTag;
use Ordercloud\Products\ProductType;
use Ordercloud\Support\Parser;
use Ordercloud\Users\UserShort;
use Ordercloud\Users\User;
use Ordercloud\Users\UserAddress;
use Ordercloud\Users\UserGroup;
use Ordercloud\Users\UserProfile;
use Ordercloud\Users\UserRole;

class Ordercloud extends \Ordercloud\Ordercloud\Ordercloud implements OrdercloudInterface
{
    /** @var Parser */
    private $parser;

    public function __construct(Parser $parser)
    {
        $this->parser = $parser;
    }

    public function getConnectedMarketPlaces($marketPlaceId)
    {
        $connectedMarketPlacesData = parent::getConnectedMarketPlaces($marketPlaceId);

        return $this->parser->parseConnections($connectedMarketPlacesData);
    }

    public function getStore($storeId)
    {
        $storeData = parent::getStore($storeId);

        return $this->parser->parseOrganisation($storeData);
    }

    public function getAllMarketPlaces()
    {
        $allMarketPlaces = parent::getAllMarketPlaces();

        return $this->parser->parseConnections($allMarketPlaces);
    }

    public function getProductsByMarketPlace($marketPlaceId, $category, $auhType, $access_token = null)
    {
        return parent::getProductsByMarketPlace($marketPlaceId, $category, $auhType, $access_token);
    }

    public function getProduct($productId, $auhType = OrdercloudInterface::AUTH_TYPE_BASIC, $access_token = null)
    {
        return parent::getProduct($productId, $auhType, $access_token); // TODO: Change the autogenerated stub
    }

    public function getOAuthUrl($redirectUrl, $login, $mobile, $clientSecret, $organisationId)
    {
        return parent::getOAuthUrl($redirectUrl, $login, $mobile, $clientSecret, $organisationId); // TODO: Change the autogenerated stub
    }

    public function getUserDetails($access_token)
    {
        $user = parent::getUserDetails($access_token);

        return $this->parser->parseUser($user);
    }

    public function getUserAddresses($userId, $auhType = OrdercloudInterface::AUTH_TYPE_BASIC, $access_token = null)
    {
        $userAddresses = parent::getUserAddresses($userId, $auhType, $access_token);

        $addresses = [];
        foreach ($userAddresses as $userAddress) {
            $addresses[] = $this->parser->parseUserAddress($userAddress);
        }

        return $addresses;
    }

    public function createAddressForUser($userId, $name, $streetName, $city, array $addressDetails = [], $auhType = OrdercloudInterface::AUTH_TYPE_BASIC, $access_token = null)
    {
        return parent::createAddressForUser(
            $userId,
            $name,
            $streetName,
            $city,
            $addressDetails,
            $auhType,
            $access_token
        ); // TODO: Change the autogenerated stub
    }

    public function createOrder($userId, array $items, $paymentStatus, $deliveryType, $amount, $userGeoId = null)
    {
        parent::createOrder($userId, $items, $paymentStatus, $deliveryType, $amount, $userGeoId); // TODO: Change the autogenerated stub
    }

    public function getOrdersForUser($userId, $auhType = OrdercloudInterface::AUTH_TYPE_BASIC, $access_token = null, $page = 1, $pageSize = 10, array $orderStatuses = [], array $paymentStatuses = [], $sort = 'date+')
    {
        $ordersArray = parent::getOrdersForUser($userId, $auhType, $access_token, $page, $pageSize, $orderStatuses, $paymentStatuses, $sort);

        $orders = [];
        foreach ($ordersArray as $order) {
            $orders[] = $this->parser->parseOrder($order);
        }

        return $orders;
    }

    public function getMenu($selectedStoreId)
    {
        return parent::getMenu($selectedStoreId); // TODO: Change the autogenerated stub
    }

    public function getNewAccessToken($refreshToken)
    {
        return parent::getNewAccessToken($refreshToken);
    }

    public function getSettingsForOrganisation()
    {
        $settingsForOrganisation = parent::getSettingsForOrganisation();

        $settings = [];
        foreach ($settingsForOrganisation as $setting) {
            $settings[] = $this->parser->parseOrganisationSetting($setting);
        }

        return $settings;
    }

    public function createCreditCardPayment($paymentGateway, $amount, $budgetPeriod, $cardExpiryMonth, $cardExpiryYear, $nameOnCard, $cvv, $cardNumber, $orderRef, $description, $testMode, $access_token
    ) {
        return parent::createCreditCardPayment(
            $paymentGateway,
            $amount,
            $budgetPeriod,
            $cardExpiryMonth,
            $cardExpiryYear,
            $nameOnCard,
            $cvv,
            $cardNumber,
            $orderRef,
            $description,
            $testMode,
            $access_token
        ); // TODO: Change the autogenerated stub
    }

    public function getProfile($userId)
    {
        $profile = parent::getProfile($userId);

        return $this->parser->parseUserProfile($profile);
    }

    public function updateProfile($userId, $firstName, $lastName, $nickName, $email, $cellPhoneNumber, $gender)
    {
        parent::updateProfile($userId, $firstName, $lastName, $nickName, $email, $cellPhoneNumber, $gender); // TODO: Change the autogenerated stub
    }

    public function getSettingsForOrganisationByKeyName($key)
    {
        $setting = parent::getSettingsForOrganisationByKeyName($key);

        return $this->parser->parseOrganisationSetting($setting);
    }
}
