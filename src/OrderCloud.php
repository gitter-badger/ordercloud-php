<?php namespace Ordercloud;

use Ordercloud\Connections\Connection;
use Ordercloud\Ordercloud\OrdercloudInterface;
use Ordercloud\Organisations\Organisation;
use Ordercloud\Organisations\OrganisationOperatingHours;
use Ordercloud\Organisations\OrganisationProfile;
use Ordercloud\Organisations\OrganisationType;
use Ordercloud\Users\ShortUser;
use Ordercloud\Users\User;
use Ordercloud\Users\UserProfile;

class Ordercloud extends \Ordercloud\Ordercloud\Ordercloud implements OrdercloudInterface
{
    public function getConnectedMarketPlaces($marketPlaceId)
    {
        //TODO
        return parent::getConnectedMarketPlaces($marketPlaceId);
    }

    public function getStore($storeId)
    {
        $storeData = parent::getStore($storeId);

        $types = [];
        foreach ($storeData['type'] as $type) {
            $types[] = new OrganisationType(
                $type['id'],
                $type['name'],
                $type['plural']
            );
        }

        $profiles = [];
        foreach ($storeData['profile'] as $profile) {
            $userProfile = new UserProfile(
                $profile['contactPerson']['profile']['firstName'],
                $profile['contactPerson']['profile']['surname'],
                $profile['contactPerson']['profile']['email'],
                $profile['contactPerson']['profile']['nickName'],
                $profile['contactPerson']['profile']['cellphoneNumber'],
                $profile['contactPerson']['profile']['sex']
            );

            $contactPerson = new ShortUser(
                $profile['contactPerson']['id'],
                $profile['contactPerson']['username'],
                $userProfile
            );

            $profiles[] = new OrganisationProfile(
                $profile['id'],
                $contactPerson,
                $profile['contactNumber'],
                $profile['enabled'],
                $profile['distance'],
                $profile['latitude'],
                $profile['longitude']
            );
        }

        $operatingHours = [];
        foreach ($storeData['operatingHours'] as $operatingTimes) {
            $operatingHours[] = new OrganisationOperatingHours(
                $operatingTimes['id'],
                $operatingTimes['day'],
                $operatingTimes['openTime'],
                $operatingTimes['closeTime'],
                $operatingTimes['dayName']
            );
        }

        return new Organisation(
            $storeData['id'],
            $storeData['name'],
            $storeData['code'],
            $types,
            $profiles,
            $operatingHours,
            $storeData['ordersHash'],
            $storeData['status'],
            $storeData['lastOnline'],
            $storeData['delivering'],
            $storeData['open'],
            $storeData['registeredDirectly']
        );
    }

    public function getAllMarketPlaces()
    {
        // TODO: Implement getAllMarketPlaces() method.
        return parent::getAllMarketPlaces();
    }

    public function getProductsByMarketPlace($marketPlaceId, $category, $auhType, $access_token = null)
    {
        // TODO: Implement getProductsByMarketPlace() method.
        return parent::getProductsByMarketPlace($marketPlaceId, $category, $auhType, $access_token);
    }

    public function getProduct($productId, $auhType = OrdercloudInterface::AUTH_TYPE_BASIC, $access_token = null)
    {
        return parent::getProduct($productId, $auhType, $access_token); // TODO: Change the autogenerated stub
    }

    public function getOAuthUrl($redirectUrl, $login, $mobile, $clientSecret, $organisationId)
    {
        return parent::getOAuthUrl($redirectUrl, $login, $mobile, $clientSecret, $organisationId); // TODO: Change the autogenerated stub
    }

    public function getUserDetails($access_token)
    {
        return parent::getUserDetails($access_token); // TODO: Change the autogenerated stub
    }

    public function getUserAddresses($userId, $auhType = OrdercloudInterface::AUTH_TYPE_BASIC, $access_token = null)
    {
        return parent::getUserAddresses($userId, $auhType, $access_token); // TODO: Change the autogenerated stub
    }

    public function createAddressForUser($userId, $name, $streetName, $city, array $addressDetails = [], $auhType = OrdercloudInterface::AUTH_TYPE_BASIC, $access_token = null)
    {
        return parent::createAddressForUser(
            $userId,
            $name,
            $streetName,
            $city,
            $addressDetails,
            $auhType,
            $access_token
        ); // TODO: Change the autogenerated stub
    }

    public function createOrder($userId, array $items, $paymentStatus, $deliveryType, $amount, $userGeoId = null)
    {
        parent::createOrder($userId, $items, $paymentStatus, $deliveryType, $amount, $userGeoId); // TODO: Change the autogenerated stub
    }

    public function getOrdersForUser($userId, $auhType = OrdercloudInterface::AUTH_TYPE_BASIC, $access_token = null, $page = 1, $pageSize = 10, array $orderStatuses = [], array $paymentStatuses = [], $sort = 'date+')
    {
        return parent::getOrdersForUser(
            $userId,
            $auhType,
            $access_token,
            $page,
            $pageSize,
            $orderStatuses,
            $paymentStatuses,
            $sort
        ); // TODO: Change the autogenerated stub
    }

    public function getMenu($selectedStoreId)
    {
        return parent::getMenu($selectedStoreId); // TODO: Change the autogenerated stub
    }

    public function getNewAccessToken($refreshToken)
    {
        return parent::getNewAccessToken($refreshToken); // TODO: Change the autogenerated stub
    }

    public function getSettingsForOrganisation()
    {
        return parent::getSettingsForOrganisation(); // TODO: Change the autogenerated stub
    }

    public function createCreditCardPayment($paymentGateway, $amount, $budgetPeriod, $cardExpiryMonth, $cardExpiryYear, $nameOnCard, $cvv, $cardNumber, $orderRef, $description, $testMode, $access_token
    ) {
        return parent::createCreditCardPayment(
            $paymentGateway,
            $amount,
            $budgetPeriod,
            $cardExpiryMonth,
            $cardExpiryYear,
            $nameOnCard,
            $cvv,
            $cardNumber,
            $orderRef,
            $description,
            $testMode,
            $access_token
        ); // TODO: Change the autogenerated stub
    }

    public function getProfile($userId)
    {
        return parent::getProfile($userId); // TODO: Change the autogenerated stub
    }

    public function updateProfile($userId, $firstName, $lastName, $nickName, $email, $cellPhoneNumber, $gender)
    {
        parent::updateProfile($userId, $firstName, $lastName, $nickName, $email, $cellPhoneNumber, $gender); // TODO: Change the autogenerated stub
    }

    public function getSettingsForOrganisationByKeyName($key)
    {
        return parent::getSettingsForOrganisationByKeyName($key); // TODO: Change the autogenerated stub
    }
}
